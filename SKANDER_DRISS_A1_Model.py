#!/usr/bin/env python
# coding: utf-8

# <h1>Machine Learning Assignment</h1>
# <h2>Submitted by Skander Driss</h2>
# <h4>Professor Chase Kusterer<br>
# Hult International Business School</h4>

# In[1]:


get_ipython().run_cell_magic('timeit', '', "# importing libraries\nimport pandas as pd             # data science essentials\nimport matplotlib.pyplot as plt # essential graphical output\nimport seaborn as sns           # enhanced graphical output\nimport statsmodels.formula.api as smf # regression modeling\nfrom sklearn.model_selection import train_test_split # train/test split\nfrom sklearn.linear_model import LinearRegression\n\n\n%config IPCompleter.greedy=True\n\n# setting pandas print options\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n\n# specifying file name\nfile = 'Apprentice_Chef_Dataset.xlsx'\n\n\n# reading the file into Python\nfood = pd.read_excel(file)\n\n# Imputing the missing values: Family name missing will take the First name\nfood['FAMILY_NAME'][food['FAMILY_NAME'].isnull()] = food['FIRST_NAME'][food['FAMILY_NAME'].isnull()]\n\n\n########################### setting outlier thresholds\n\nRevenue_hi = 4200\nCONTACTS_W_CUSTOMER_SERVICE_lo = 3\nCONTACTS_W_CUSTOMER_SERVICE_hi = 12\nMOBILE_LOGINS_lo               = 0\nMOBILE_LOGINS_hi               = 3\npc_logins_lo                   = 4\npc_logins_hi                   = 7\ncancellation_before_noon_hi    = 5\ncancellation_after_noon_hi     = 2\nMASTER_CLASSES_ATTENDED_hi     = 3\nAVG_CLICKS_PER_VISIT_lo        = 7\n\n\n\n##############################################################################\n## Feature Engineering (outlier thresholds)                                 ##\n##############################################################################\n\n# developing features (columns) for outliers\n\n# Contact with customer service\nfood['out_CONTACTS_W_CUSTOMER_SERVICE'] = 0\ncondition_hi = food.loc[0:,'out_CONTACTS_W_CUSTOMER_SERVICE'][food['CONTACTS_W_CUSTOMER_SERVICE'] > CONTACTS_W_CUSTOMER_SERVICE_hi]\ncondition_lo = food.loc[0:,'out_CONTACTS_W_CUSTOMER_SERVICE'][food['CONTACTS_W_CUSTOMER_SERVICE'] < CONTACTS_W_CUSTOMER_SERVICE_lo]\n\nfood['out_CONTACTS_W_CUSTOMER_SERVICE'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\nfood['out_CONTACTS_W_CUSTOMER_SERVICE'].replace(to_replace = condition_lo,\n                                    value      = 1,\n                                    inplace    = True)\n\n# mobile logins\nfood['out_MOBILE_LOGINS'] = 0\ncondition_hi = food.loc[0:,'out_MOBILE_LOGINS'][food['MOBILE_LOGINS'] >= MOBILE_LOGINS_hi ]\ncondition_lo = food.loc[0:,'out_MOBILE_LOGINS'][food['MOBILE_LOGINS'] <= MOBILE_LOGINS_lo]\nfood['out_MOBILE_LOGINS'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\nfood['out_MOBILE_LOGINS'].replace(to_replace = condition_lo,\n                                    value      = 1,\n                                    inplace    = True)\n\n\n# Pc logins\nfood['out_PC_LOGINS'] = 0\ncondition_hi = food.loc[0:,'out_PC_LOGINS'][food['PC_LOGINS'] >= pc_logins_hi]\ncondition_lo = food.loc[0:,'out_PC_LOGINS'][food['PC_LOGINS'] <= pc_logins_lo]\n\nfood['out_PC_LOGINS'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\nfood['out_PC_LOGINS'].replace(to_replace = condition_lo,\n                                    value      = 1,\n                                    inplace    = True)\n\n\n#Revenue\nfood['out_Revenue'] = 0\ncondition_hi = food.loc[0:,'out_Revenue'][food['REVENUE'] > Revenue_hi]\n\nfood['out_Revenue'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\n#cancellation_before_noon\nfood['out_cancellation_before_noon'] = 0\ncondition_hi = food.loc[0:,'out_cancellation_before_noon'][food['CANCELLATIONS_BEFORE_NOON'] > cancellation_before_noon_hi ]\n\nfood['out_cancellation_before_noon'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\n#cancellation_after_noon\nfood['out_cancellation_after_noon'] = 0\ncondition_hi = food.loc[0:,'out_cancellation_after_noon'][food['CANCELLATIONS_AFTER_NOON'] > cancellation_after_noon_hi ]\n\nfood['out_cancellation_after_noon'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\n\n\n#MASTER_CLASSES_ATTENDED\nfood['out_MASTER_CLASSES_ATTENDED'] = 0\ncondition_hi = food.loc[0:,'out_MASTER_CLASSES_ATTENDED'][food['MASTER_CLASSES_ATTENDED'] >= MASTER_CLASSES_ATTENDED_hi]\n\nfood['out_MASTER_CLASSES_ATTENDED'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\n#avg click per visit\nfood['out_AVG_CLICKS_PER_VISIT'] = 0\ncondition_hi = food.loc[0:,'out_AVG_CLICKS_PER_VISIT'][food['AVG_CLICKS_PER_VISIT'] > AVG_CLICKS_PER_VISIT_lo]\n\nfood['out_AVG_CLICKS_PER_VISIT'].replace(to_replace = condition_hi,\n                                    value      = 1,\n                                    inplace    = True)\n\n\n###################### setting trend-based thresholds\n\navg_prep_video_time_change_hi     = 320 # data scatters above this point\navg_time_per_site_visit_change_hi = 400  # data scatters above this point\nunique_meals_change_hi            = 12.5 # data scatters above this point\n\ncancellation_after_noon_change_at = 0 # zero inflated\nweekly_plan_change_at             = 0 # zero inflated\ntotal_photo_viewed_change_at      = 0 # zero inflated\n\n##############################################################################\n## Feature Engineering (trend changes)                                      ##\n##############################################################################\n\n# developing features (columns) for outliers\n\n\n# AVG_PREP_VID_TIME\nfood['change_avg_prep_video_time'] = 0\ncondition = food.loc[0:,'change_avg_prep_video_time'][food['AVG_PREP_VID_TIME'] > avg_prep_video_time_change_hi]\n\nfood['change_avg_prep_video_time'].replace(to_replace = condition,\n                                   value      = 1,\n                                   inplace    = True)\n\n\n# AVG_TIME_PER_SITE_VISIT\nfood['change_avg_time_per_site_visit'] = 0\ncondition = food.loc[0:,'change_avg_time_per_site_visit'][food['AVG_TIME_PER_SITE_VISIT'] > avg_time_per_site_visit_change_hi]\n\nfood['change_avg_time_per_site_visit'].replace(to_replace = condition,\n                                   value      = 1,\n                                   inplace    = True)\n\n\n# UNIQUE_MEALS_PURCH\nfood['change_unique_meals'] = 0\ncondition = food.loc[0:,'change_unique_meals'][food['UNIQUE_MEALS_PURCH'] > unique_meals_change_hi]\n\nfood['change_unique_meals'].replace(to_replace = condition,\n                                   value      = 1,\n                                   inplace    = True)\n\n\n\n\n# CANCELLATIONS_AFTER_NOON\nfood['change_cancellation_after_noon'] = 0\ncondition = food.loc[0:,'change_cancellation_after_noon'][food['CANCELLATIONS_AFTER_NOON'] == cancellation_after_noon_change_at]\n\nfood['change_cancellation_after_noon'].replace(to_replace = condition,\n                                       value      = 1,\n                                       inplace    = True)\n\n# WEEKLY_PLAN\nfood['change_weekly_plan'] = 0\ncondition = food.loc[0:,'change_weekly_plan'][food['WEEKLY_PLAN'] == weekly_plan_change_at]\n\nfood['change_weekly_plan'].replace(to_replace = condition,\n                                       value      = 1,\n                                       inplace    = True)\n\n# Overall Cond\nfood['change_total_photo_viewed'] = 0\ncondition = food.loc[0:,'change_total_photo_viewed'][food['TOTAL_PHOTOS_VIEWED'] == total_photo_viewed_change_at]\n\nfood['change_total_photo_viewed'].replace(to_replace = condition,\n                                       value      = 1,\n                                       inplace    = True)\n\n\n#################################Splitting Email column and hot coding for professional and personal\n#splitting personal emails\n\n# placeholder list\nplaceholder_lst = []\n\n# looping over each email address\nfor index, col in food.iterrows():\n    \n    # splitting email domain at '@'\n    split_email = food.loc[index, 'EMAIL'].split(sep = '@')\n    \n    # appending placeholder_lst with the results\n    placeholder_lst.append(split_email)\n\n# converting placeholder_lst into a DataFrame \nemail_df = pd.DataFrame(placeholder_lst)\n\n# renaming column to concatenate\nemail_df.columns = ['name' ,'email_domain']\n\n# concatenating personal_email_domain with food DataFrame\nfood = pd.concat([food, email_df['email_domain']],\n                   axis = 1)\n\n# personal email domain\npersonal_email_domains = ['@gmail.com', '@yahoo.com','@live.com','@msn.com','hotmail.com']\n\n# placeholder list\nplaceholder_lst = []\n\n# looping to group observations by domain type\nfor domain in food['email_domain']:\n        if '@' + domain in personal_email_domains :\n            placeholder_lst.append('Personal')\n        else:\n            placeholder_lst.append('Professional')\n\n\n# concatenating with original DataFrame\nfood['domain_group'] = pd.Series(placeholder_lst )\n\n#Changing the type to categorical for a better hot coding\nfood['domain_group'].astype('category')\n\n#hot coding for domain (Professional/Personal)\none_hot_domain = pd.get_dummies(food['domain_group'])\nfood = food.join([one_hot_domain])\n\n\n################################Preparing for the model \n\n# declaring set of x-variables\nx_variables = ['CROSS_SELL_SUCCESS',\n'TOTAL_MEALS_ORDERED',\n'UNIQUE_MEALS_PURCH',\n'CONTACTS_W_CUSTOMER_SERVICE',\n'PRODUCT_CATEGORIES_VIEWED',\n'AVG_TIME_PER_SITE_VISIT',\n'TASTES_AND_PREFERENCES',\n'PC_LOGINS',\n'PACKAGE_LOCKER',\n'AVG_PREP_VID_TIME',\n'LARGEST_ORDER_SIZE',\n'MASTER_CLASSES_ATTENDED',\n'MEDIAN_MEAL_RATING',\n'TOTAL_PHOTOS_VIEWED',\n'out_Revenue',\n'out_MASTER_CLASSES_ATTENDED',\n'out_AVG_CLICKS_PER_VISIT',\n'change_avg_prep_video_time',\n'change_weekly_plan',\n'change_total_photo_viewed',\n'Professional',\n'Personal']\n\n##################### applying model in scikit-learn\n\n# Preparing a DataFrame based the the analysis above\nfood_data   = food.loc[ : , x_variables]\n\n\n# Preparing the target variable\nfood_target = food.loc[:, 'REVENUE']\n\n\n# running train/test split again\nX_train, X_test, y_train, y_test = train_test_split(\n            food_data,\n            food_target,\n            test_size = 0.25,\n            random_state = 222)\n\n# Training set \nprint(X_train.shape)\nprint(y_train.shape)\n\n# Testing set\nprint(X_test.shape)\nprint(y_test.shape)\n\n\n# INSTANTIATING a model object with OLS that have best results\nlr = LinearRegression()\n\n\n# FITTING to the training data\nlr_fit = lr.fit(X_train, y_train)\n\n\n# PREDICTING on new data\nlr_pred = lr_fit.predict(X_test)\n\n\n# SCORING the results\nprint('Training Score:', lr.score(X_train, y_train).round(4))\nprint('Testing Score:',  lr.score(X_test, y_test).round(4))\n\n\n# saving scoring data for future use\nlr_train_score = lr.score(X_train, y_train).round(3)\nlr_test_score  = lr.score(X_test, y_test).round(3)")


# In[ ]:




